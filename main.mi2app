#!/usr/bin/python
'''
It pulls out given process name's log from Android logcat.

Author  : Zengwen Yuan
Version : 1.0  Init version
'''

from service import mi2app_utils as util
from mobile_insight.analyzer import Analyzer
import os
import sys
import shutil
import traceback

import subprocess
import commands

import time

from jnius import autoclass, cast

ANDROID_SHELL = "/system/bin/sh"

class LogcatMonitor(Analyzer):
    def __init__(self):
        Analyzer.__init__(self);

        self.search_terms = ["wpa_supplicant"]

        WifiInfoClass = autoclass("android.net.wifi.WifiInfo")
        WifiManagerClass = autoclass("android.net.wifi.WifiManager")
        ActivityClass = autoclass('android.app.Activity')
        
        #PythonActivity = autoclass('org.kivy.android.PythonActivity')
        PythonService = autoclass('org.kivy.android.PythonService')
        pyService = PythonService.mService
        Context = autoclass("android.content.Context")
        print "enter"

        self.mWifiManager = pyService.getSystemService(Context.WIFI_SERVICE)
        self.mWifiInfo = self.mWifiManager.getConnectionInfo()
        self.ps_num = -1
        self._get_thread_pid("wpa")

    def _get_thread_pid(self, proc_name):
        proc = subprocess.Popen(
            "su -c ps | grep -i %s" %
            proc_name,
            executable=ANDROID_SHELL,
            shell=True,
            stdout=subprocess.PIPE)
        out = proc.communicate()
        # self.log_warning(str(out))
        # self.log_warning(str(out[0]))
        # self.log_warning(str(out[0].split('\n')[0]))
        try:
            self.ps_num = str(out[0].split('\n')[0]).split()[1]
            self.log_warning("_get_thread_pid() self.ps_num = %s" % self.ps_num)
        except BaseException:
            self.log_warning(
                "Some exception happens for getting %s threads" %
                proc_name)
        # try:
        #     match_lines = str(proc.communicate()[0].split('\n'))
        #     for match in match_lines:
        #         self.log_warning("Thread match = %s" % match)
        #         self.ps_num = match.split()[1]
        #         self.log_warning(self.ps_num)
        # except BaseException:
        #     self.log_warning(
        #         "Some exception happens for getting %s threads" %
        #         proc_name)
        #     self.ps_num = -1

    def run(self):
        self.log_info("ha?")
        self.log_info(self.mWifiInfo.getSSID())

        self.log_warning("run(): I got self.ps_num = %s" % self.ps_num)

        while True:
            try:
                #lines = util.run_shell_cmd("logcat --pid %s -d" % self.ps_num, True).split('\n')
                self.log_info("running")
                lines = util.run_shell_cmd("logcat -d -s wpa_supplicant", True).split('\n')
                # lines = util.run_shell_cmd("logcat --pid 3372 -d", True).split('\n')
                for line in lines[1:]:
                    self.log_info(line)
            except:
                self.log_warning("ex4")
            # proc = subprocess.Popen("su -c logcat -c", executable=ANDROID_SHELL, shell=True, stdout=subprocess.PIPE)
            time.sleep(1)


analyzer = LogcatMonitor()
analyzer.run()
